{"ast":null,"code":"import Cookies from 'js-cookie';\nimport axios from 'axios';\n\n// 쿠키에서 토큰을 가져와 로컬 스토리지에 저장하고 쿠키에서 삭제하는 함수\nexport const saveTokenFromCookie = () => {\n  const accessToken = Cookies.get(\"Authorization\");\n  const refreshToken = Cookies.get(\"Authorization-refresh\");\n  if (accessToken && refreshToken) {\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"refreshToken\", refreshToken);\n    //Cookies.remove('Authorization'); // 쿠키에서 삭제\n    return {\n      accessToken,\n      refreshToken\n    };\n  }\n  return null;\n};\n\n/** \r\n// 로그아웃 시 로컬 스토리지에서 토큰을 삭제하는 함수\r\nexport const logout = () => {\r\n    localStorage.removeItem('accessToken');\r\n};\r\n\r\n// 로컬 스토리지에서 토큰을 가져와 Authorization 헤더에 추가하는 함수\r\nexport const getAuthHeader = () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// API 요청을 보내는 함수 예시\r\nexport const fetchData = async () => {\r\n    try {\r\n        const response = await axios.get('/some-api-endpoint', {\r\n        headers: getAuthHeader(),\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('API 요청 오류:', error);\r\n        throw error;\r\n    }\r\n};\r\n*/","map":{"version":3,"names":["Cookies","axios","saveTokenFromCookie","accessToken","get","refreshToken","localStorage","setItem"],"sources":["C:/Users/user/songdodongnae-react/songdodongnae/src/module/tokenStorage.js"],"sourcesContent":["import Cookies from 'js-cookie';\r\nimport axios from 'axios';\r\n\r\n// 쿠키에서 토큰을 가져와 로컬 스토리지에 저장하고 쿠키에서 삭제하는 함수\r\nexport const saveTokenFromCookie = () => {\r\n    const accessToken = Cookies.get(\"Authorization\");\r\n    const refreshToken = Cookies.get(\"Authorization-refresh\");\r\n    \r\n    if (accessToken && refreshToken) {\r\n        localStorage.setItem(\"accessToken\", accessToken);\r\n        localStorage.setItem(\"refreshToken\", refreshToken);\r\n        //Cookies.remove('Authorization'); // 쿠키에서 삭제\r\n        return { accessToken, refreshToken };\r\n    }\r\n    return null;\r\n};\r\n\r\n/** \r\n// 로그아웃 시 로컬 스토리지에서 토큰을 삭제하는 함수\r\nexport const logout = () => {\r\n    localStorage.removeItem('accessToken');\r\n};\r\n\r\n// 로컬 스토리지에서 토큰을 가져와 Authorization 헤더에 추가하는 함수\r\nexport const getAuthHeader = () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// API 요청을 보내는 함수 예시\r\nexport const fetchData = async () => {\r\n    try {\r\n        const response = await axios.get('/some-api-endpoint', {\r\n        headers: getAuthHeader(),\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('API 요청 오류:', error);\r\n        throw error;\r\n    }\r\n};\r\n*/"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACrC,MAAMC,WAAW,GAAGH,OAAO,CAACI,GAAG,CAAC,eAAe,CAAC;EAChD,MAAMC,YAAY,GAAGL,OAAO,CAACI,GAAG,CAAC,uBAAuB,CAAC;EAEzD,IAAID,WAAW,IAAIE,YAAY,EAAE;IAC7BC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEJ,WAAW,CAAC;IAChDG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;IAClD;IACA,OAAO;MAAEF,WAAW;MAAEE;IAAa,CAAC;EACxC;EACA,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}